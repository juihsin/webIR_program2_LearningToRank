from operator import itemgetter

import bigfloat
import os
from bigfloat import BigFloat


def write_result_file(score_dic):
    with open("out2.txt", "w") as text_file:
        print("QueryId,DocumentId", file=text_file)
        for qid in score_dic.keys():
            for doc_score_tuple in score_dic[qid]:
                print("{}".format(str(qid) + "," + str(doc_score_tuple[0])), file=text_file)
    return None


def doc_score(weight_list, max_and_min_feature_list, rel_list):
    score_dic = {}
    for doc in rel_list:
        score = 0.0
        query_id = doc[0]
        doc_id = doc[1]
        feature_list = doc[2:138]
        for index in range(0, len(weight_list)):
            weight = float(weight_list[index])
            feature = float(feature_list[index])
            feature = normalize(feature, max_and_min_feature_list, index)  # TODO: normalize
            wx = weight * feature
            score = score + wx
        score_per_doc = (doc_id, score)
        if query_id in score_dic:
            score_dic[query_id].append(score_per_doc)
        else:
            score_list = [score_per_doc]
            score_dic[query_id] = score_list

    score_dic_new = {}
    for query_id in score_dic.keys():
        score_list_sort = sorted(score_dic[query_id], key=itemgetter(1), reverse=True)
        score_dic_new[query_id] = score_list_sort[0:10]
    return score_dic_new


def readfile_to_list(filepath, delim):
    data = []
    with open(filepath, 'r') as f:
        lines = f.read().split(delim)
        for line in lines:
            cols = line.split(' ')
            cols.pop(0)
            row = []
            for col in cols:
                row.append(col.split(':')[1])
            data.append(tuple(row))
    return data


def normalize(feature_of_x, max_and_min_feature_list, index):
    max_feature_list = max_and_min_feature_list[0]
    min_feature_list = max_and_min_feature_list[1]
    max_feature = max_feature_list[index]
    min_feature = min_feature_list[index]
    feature_of_x = (feature_of_x - min_feature) / (max_feature - min_feature)
    return feature_of_x


def main():
    weight_list = ['0.3296080849059385', '3.8133142768399644', '3.926740389616215', '0.23972239168256268',
                   '1.147587919525394', '3.9692580714958074', '1.3874146358439883', '4.1053229027145095',
                   '0.2995645008088502', '5.684090414441585', '0.35064986428432915', '4.801592962130576',
                   '2.0204852331117618', '5.2519981071351864', '2.601431525197437', '0.11553381128386972',
                   '3.232235209245516', '0.49493476269291364', '2.107238942238899', '5.69617470474362',
                   '0.10548279389887047', '0.8071038175704439', '0.007617406757289715', '3.339673984586884',
                   '3.4828304113878934', '2.4201213145822327', '5.43784061576635', '0.7727222533993482',
                   '0.7410621594466309', '1.70415247952986', '1.0871456072985004', '3.0924960735559988',
                   '5.193646440521253', '3.2481762331540405', '0.9654846051468949', '0.7370708645494662',
                   '0.48415957696657463', '0.210746457551891', '1.2360321391412128', '1.1462459631059467',
                   '4.485969379690464', '0.051640556860574185', '0.7350955585003557', '0.011824169776534771',
                   '0.9674678073080671', '0.743278713735948', '2.6993096095938562', '0.948875273846945',
                   '0.7638623605494433', '1.680013142929823', '2.385946605012087', '0.007584649235326111',
                   '1.106310181663199', '2.451078687713331', '3.609667152030678', '3.3407000009197345',
                   '3.2369530720135735', '4.250773239844871', '0.7694567871406767', '0.2585816019920655',
                   '0.7605047608967108', '0.3100013448888791', '0.5428548835247232', '3.5032192957914847',
                   '3.1816926926347806', '0.8381551406671595', '3.1130693149894615', '4.532344662707476',
                   '3.435847722645004', '2.7204049346214476', '3.7177654288501047', '0.8127717172036606',
                   '2.40544777257304', '0.7565664677474262', '3.566220955225492', '0.24251413051138093',
                   '2.2946034347543582', '1.0888456714254182', '3.522493088674033', '1.8402871915464287',
                   '3.2862979903039005', '0.49628245275830335', '0.6917171915162982', '0.9816920336284072',
                   '0.4051617103406679', '0.7489472122748222', '0.39699621276242225', '0.7675091383033735',
                   '2.6285190756532573', '0.050869324197308795', '1.0066844548679568', '0.34397077300749185',
                   '0.009135361971542051', '0.00933585411412366', '0.9505708800760754', '0.010082323545744327',
                   '1.2876550456164695', '0.984412301700708', '0.8496910818501539', '0.8882974229369206',
                   '0.7524031519069201', '0.7386803111556209', '3.367821017383854', '3.9084328889333504',
                   '0.7716314524687867', '1.8398780764449196', '2.064849558612314', '0.6153388783046968',
                   '4.23599721416153', '1.1501086680364214', '3.9072351412831408', '1.2735098912035367',
                   '3.3419150930037254', '0.7614535369481752', '0.7620971340761897', '0.3235889181841097',
                   '0.9283944910713497', '5.814915762859504', '1.5595593844364553', '0.7364557765691013',
                   '0.40930167809415985', '1.2224212311159637', '5.214685870420125', '3.290657308532004',
                   '0.01902596581601121', '0.7753699519869443', '4.078243736685718', '0.7481848677813506',
                   '0.744953594492284', '0.012179574466341162', '0.607015485904837', '3.7562375824312935',
                   '3.1770738217741985', '0.01743898327599129', '0.5272336622698388', '2.3475413385024395']

    max_feature_list = [277.0, 218.033568, 16.0, 856.0, 4040.0, 16.0, 1678.5, 265.0, 86.0, 15.0, 315.0, 1.0, 1.0,
                        1.636364, 1.0, 121.0, 26096.399767, 2580.061807, 0.09, 0.757377, 3233.0, 1.0, 10343023.179426,
                        121.077417, 9.0, 1.0, 1.851064, 0.0, 0.705756, 42.0, 1.0, 1.0, 3.0, 3.0, 1.0, 0.0, 86.0, 6669.0,
                        1672.5, 42.0, 0.757377, 2789632.0, 0.0, 2763906.25, 1.0, 0.705644, 136.783001, 65535.0, 1.0,
                        1.0, 8667.005515, 161696.888889, 1.0, 168.788808, 0.617647, 1.0, 13048.199883, 0.617647, 1.0,
                        6857.293941, 0.0, 0.25, 25963.491963, 3.0, 13075.29137, 1552.0, 1.0, 1549.0, 97.0, 135.169415,
                        301.683641, 1.0, 254.0, 1.0, 168.788808, 4514.730882, 42.0, 1.0, 128.560046, 43.221589,
                        65.075948, 315.0, 771.111504, 3347.0, 2058.949308, 0.0, 6927.854528, 314131554.0, 52.0,
                        13544625.0, 1.0, 2287.866383, 166804769.503892, 167505292.377452, 1579.0, 980000001.0, 4040.0,
                        1.0, 0.0625, 3335.0, 0.0, 0.0, 0.617647, 13540.0, 0.0, 43.215106, 0.25, 94.0, 1.0, 65534.0,
                        13554.0, 0.25, 113.046133, 1.0, 0.0, 695.932703, 1.0, 0.757377, 254.0, 0.0, 862.0, 1.0, 15.0,
                        73.169271, 148653.237799, 0.0, 72.19844, 0.0, 0.0, 2783892.25, 26017.674936, 178.0, 26150.58274,
                        2209.0, 706.513591, 8674.545513]
    min_feature_list = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6809.256888,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.725981, 0.0, 0.0, 0.0, -138.203961, -174.793032, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, -160.344508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -163.438492, 0.0, 0.0, -169.913234,
                        -15.386967, 1.0, 0.0, 0.0, -3404.628444, 0.0, 0.0, 0.0, 0.0, 0.0, -3404.628444, 0.0, 0.0, 0.0,
                        -139.367787, 0.0, 0.0, 0.0, -3483.406367, 0.0, 0.0, 4.0, 1.0, -15.300321, 0.0, 0.0, 1.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 2.001239, -4.387408, 0.0, 0.0, 0.0, 0.0, 0.0, -141.712421, 0.0,
                        -2083777989.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -162.903042,
                        -160.149259, 0.0, 0.0, -161.336069, -4.412168, 0.0, 0.0, 0.0, 100.0, 2.0, 0.0, 1.993372, 0.0,
                        -139.196935, 0.0, 0.0, 0.0, 1.0, -163.220923, 0.0, 0.0, 0.0, 0.0, 0.0, -143.962503, 0.0,
                        -146.691595, -190.997484, 0.0, 0.0, 0.0, -6966.812734, 0.0, 0.0, -3483.406367]

    script_dir = os.path.dirname(os.path.realpath(__file__))
    rel_path = "../data/test.txt"
    abs_file_path = os.path.join(script_dir, rel_path)
    rel_list = readfile_to_list(abs_file_path, '\n')
    max_and_min_feature_list = [max_feature_list, min_feature_list]
    score_dic = doc_score(weight_list, max_and_min_feature_list, rel_list)
    write_result_file(score_dic)
    return None


main()
