import argparse
from operator import itemgetter

import math
import os


def write_result_file(score_dic):
    with open("out1.txt", "w") as text_file:
        print("QueryId,DocumentId", file=text_file)
        for qid in score_dic.keys():
            for doc_score_tuple in score_dic[qid]:
                print("{}".format(str(qid) + "," + str(doc_score_tuple[0])), file=text_file)
    return None


def doc_score(weight_list, max_and_min_feature_list, rel_list):
    score_dic = {}
    for doc in rel_list:
        score = 0.0
        query_id = doc[0]
        doc_id = doc[1]
        feature_list = doc[2:138]
        for index in range(0, len(weight_list)):
            weight = float(weight_list[index])
            feature = float(feature_list[index])
            feature = normalize(feature, max_and_min_feature_list, index)  # TODO: normalize
            wx = weight * feature
            score = score + wx
        score_per_doc = (doc_id, score)
        if query_id in score_dic:
            score_dic[query_id].append(score_per_doc)
        else:
            score_list = [score_per_doc]
            score_dic[query_id] = score_list

    score_dic_new = {}
    for query_id in score_dic.keys():
        score_list_sort = sorted(score_dic[query_id], key=itemgetter(1), reverse=True)
        score_dic_new[query_id] = score_list_sort[0:10]
    return score_dic_new


def readfile_to_list(filepath, delim):
    data = []
    with open(filepath, 'r') as f:
        lines = f.read().split(delim)
        for line in lines:
            cols = line.split(' ')
            cols.pop(0)
            row = []
            for col in cols:
                row.append(col.split(':')[1])
            data.append(tuple(row))
    return data


def normalize(feature_of_x, max_and_min_feature_list, index):
    max_feature_list = max_and_min_feature_list[0]
    min_feature_list = max_and_min_feature_list[1]
    max_feature = max_feature_list[index]
    min_feature = min_feature_list[index]
    feature_of_x = (feature_of_x - min_feature) / (max_feature - min_feature)
    return feature_of_x


def main():
    weight_list = ['0.007656028546428231', '0.012658664405761258', '-0.00895574494736577', '0.007374850747916399',
                   '0.006084378812192495', '-0.005763366011169026', '0.006662164858283657', '0.004620308167815215',
                   '0.007875159462617739', '0.014527758106921806', '0.007754135352833183', '0.010657935599995746',
                   '0.010364677389850922', '0.021409250973690303', '0.032500297032784016', '0.007288616374992879',
                   '0.006983511425779877', '0.007711002341439317', '0.008732856281784806', '0.01930101876072387',
                   '0.007363147666722772', '0.009139355262100048', '0.0073521501818713045', '-0.008468981712518045',
                   '0.007943217290842334', '0.007610306393413046', '0.013605389047648403', '0.022298921092512792',
                   '0.028937509284346626', '0.009816555015760887', '0.11523786785744564', '0.012584527657115412',
                   '0.023551436777316203', '0.006721894622316664', '0.12814567433912197', '0.02215134315653046',
                   '0.007856582442258328', '0.0071917071472321695', '0.0065220832668473165', '0.010113754273619732',
                   '0.01956780354224913', '0.007886230955352952', '0.021720224591243006', '0.007328470710593481',
                   '0.14495396353062381', '0.02462955071372152', '0.01496543331321073', '0.05835901743038865',
                   '0.013061640433376176', '0.0032520377808725348', '0.0075701961008364385', '0.0073510701834528635',
                   '0.007775833585428438', '0.01514312145910292', '0.04502689727567979', '0.039466926622576955',
                   '0.0072374088248271864', '0.044848974986682215', '0.05051309509163598', '0.007428813041617973',
                   '0.020779645050037994', '0.007424907068112095', '0.007022005248114264', '0.009229929940011405',
                   '0.007347299865947434', '0.0073868109426613515', '0.04286581049774908', '0.003902768494636303',
                   '0.0025374371505255734', '0.00810904703491767', '0.011008897986705483', '0.050207794314602955',
                   '0.014401849757938718', '-0.018483605011345373', '0.014852617356067065', '0.007329010879449991',
                   '0.009350247790994127', '0.02119461315798481', '-0.00832011095215198', '-0.006356125193775636',
                   '0.007957943734494044', '0.007617876958549011', '0.007818392147481375', '0.006377196132143984',
                   '0.007911703179999813', '0.02482404679143367', '0.007489585292005202', '0.007374717189536057',
                   '0.008810009998036007', '0.0075935300424773075', '0.10461537009488832', '0.0076707068473272425',
                   '0.00734900450713814', '0.0073488121145322185', '0.0075700107643288045', '0.007352944509492554',
                   '0.006142549977969408', '0.11501622658306826', '0.007548899164451341', '0.006330077596546044',
                   '0.02452285262214027', '0.01993947540554772', '0.04368828742820476', '-0.010910534478009477',
                   '0.02289802092396971', '-0.006328425677345324', '0.006295154162706066', '0.007702939592024485',
                   '0.011922312649215878', '0.1460682943154904', '-0.011024539442777249', '0.00392617834286857',
                   '-0.008066806643453274', '0.02068030105254785', '0.019729863612228483', '0.007981485460324768',
                   '0.08543634582106475', '0.018305168550514717', '-0.017363290667661995', '0.019791086328829942',
                   '0.007440442918033757', '0.013045330364170061', '0.012305097158080166', '0.03129406560981271',
                   '0.007349715963059742', '0.024152505121901854', '0.029712083205416115', '0.028612003955288026',
                   '0.02449340263350139', '0.0073272944918864585', '0.007085457553088937', '0.009955362251839016',
                   '0.007045148804396943', '0.007352373309259918', '0.007964413430777964', '0.007721950308433776']

    max_feature_list = [277.0, 218.033568, 16.0, 856.0, 4040.0, 16.0, 1678.5, 265.0, 86.0, 15.0, 315.0, 1.0, 1.0,
                        1.636364, 1.0, 121.0, 26096.399767, 2580.061807, 0.09, 0.757377, 3233.0, 1.0, 10343023.179426,
                        121.077417, 9.0, 1.0, 1.851064, 0.0, 0.705756, 42.0, 1.0, 1.0, 3.0, 3.0, 1.0, 0.0, 86.0, 6669.0,
                        1672.5, 42.0, 0.757377, 2789632.0, 0.0, 2763906.25, 1.0, 0.705644, 136.783001, 65535.0, 1.0,
                        1.0, 8667.005515, 161696.888889, 1.0, 168.788808, 0.617647, 1.0, 13048.199883, 0.617647, 1.0,
                        6857.293941, 0.0, 0.25, 25963.491963, 3.0, 13075.29137, 1552.0, 1.0, 1549.0, 97.0, 135.169415,
                        301.683641, 1.0, 254.0, 1.0, 168.788808, 4514.730882, 42.0, 1.0, 128.560046, 43.221589,
                        65.075948, 315.0, 771.111504, 3347.0, 2058.949308, 0.0, 6927.854528, 314131554.0, 52.0,
                        13544625.0, 1.0, 2287.866383, 166804769.503892, 167505292.377452, 1579.0, 980000001.0, 4040.0,
                        1.0, 0.0625, 3335.0, 0.0, 0.0, 0.617647, 13540.0, 0.0, 43.215106, 0.25, 94.0, 1.0, 65534.0,
                        13554.0, 0.25, 113.046133, 1.0, 0.0, 695.932703, 1.0, 0.757377, 254.0, 0.0, 862.0, 1.0, 15.0,
                        73.169271, 148653.237799, 0.0, 72.19844, 0.0, 0.0, 2783892.25, 26017.674936, 178.0, 26150.58274,
                        2209.0, 706.513591, 8674.545513]
    min_feature_list = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -6809.256888,
                        0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 3.725981, 0.0, 0.0, 0.0, -138.203961, -174.793032, 0.0, 0.0, 0.0,
                        0.0, 0.0, 0.0, -160.344508, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -163.438492, 0.0, 0.0, -169.913234,
                        -15.386967, 1.0, 0.0, 0.0, -3404.628444, 0.0, 0.0, 0.0, 0.0, 0.0, -3404.628444, 0.0, 0.0, 0.0,
                        -139.367787, 0.0, 0.0, 0.0, -3483.406367, 0.0, 0.0, 4.0, 1.0, -15.300321, 0.0, 0.0, 1.0, 0.0,
                        0.0, 0.0, 0.0, 0.0, 2.001239, -4.387408, 0.0, 0.0, 0.0, 0.0, 0.0, -141.712421, 0.0,
                        -2083777989.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -162.903042,
                        -160.149259, 0.0, 0.0, -161.336069, -4.412168, 0.0, 0.0, 0.0, 100.0, 2.0, 0.0, 1.993372, 0.0,
                        -139.196935, 0.0, 0.0, 0.0, 1.0, -163.220923, 0.0, 0.0, 0.0, 0.0, 0.0, -143.962503, 0.0,
                        -146.691595, -190.997484, 0.0, 0.0, 0.0, -6966.812734, 0.0, 0.0, -3483.406367]

    script_dir = os.path.dirname(os.path.realpath(__file__))
    rel_path = "../data/test.txt"
    abs_file_path = os.path.join(script_dir, rel_path)
    rel_list = readfile_to_list(abs_file_path, '\n')
    max_and_min_feature_list = [max_feature_list, min_feature_list]
    score_dic = doc_score(weight_list, max_and_min_feature_list, rel_list)
    write_result_file(score_dic)
    return None


main()
